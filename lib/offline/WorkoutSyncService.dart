import 'dart:async';
import 'package:connectivity_plus/connectivity_plus.dart';
import 'package:flutter/foundation.dart';
import 'package:hive/hive.dart';
import 'package:dio/dio.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

import '../data/DatabaseHelper.dart';

class WorkoutSyncService {
  static final WorkoutSyncService _instance = WorkoutSyncService._internal();
  factory WorkoutSyncService() => _instance;
  final Connectivity _connectivity = Connectivity();
  final Dio _dio = Dio();
  final _syncQueueBox = 'syncQueueBox';
  final dbHelper = DatabaseHelper();

  // Stream controller ƒë·ªÉ th√¥ng b√°o thay ƒë·ªïi tr·∫°ng th√°i ƒë·ªìng b·ªô
  final _syncStatusController = StreamController<bool>.broadcast();
  Stream<bool> get syncStatusStream => _syncStatusController.stream;

  // L∆∞u tr·ªØ instance c·ªßa box
  Box<Map>? _box;

  WorkoutSyncService._internal();

  // L·∫•y instance c·ªßa box
  Future<Box<Map>> get _getBox async {
    if (_box == null) {
      _box = await Hive.openBox<Map>(_syncQueueBox);
    }
    return _box!;
  }

  // Kh·ªüi t·∫°o service, g·ªçi trong main.dart
  Future<void> init() async {
    try {
      // ƒê·∫£m b·∫£o box sync queue ƒë√£ ƒë∆∞·ª£c t·∫°o
      _box = await Hive.openBox<Map>(_syncQueueBox);

      // L·∫Øng nghe s·ª± thay ƒë·ªïi k·∫øt n·ªëi
      _connectivity.onConnectivityChanged
          .listen((ConnectivityResult result) async {
        if (result != ConnectivityResult.none) {
          // Khi c√≥ k·∫øt n·ªëi internet tr·ªü l·∫°i, th·ª≠ ƒë·ªìng b·ªô d·ªØ li·ªáu
          final hasPendingData = await hasPendingSync();
          if (hasPendingData) {
            _syncStatusController.add(true);
            await syncPendingData();
          }
        }
      });

      // Ki·ªÉm tra ngay khi kh·ªüi t·∫°o
      final hasPendingData = await hasPendingSync();
      if (hasPendingData) {
        _syncStatusController.add(true);
      }
    } catch (e) {
      if (kDebugMode) {
        print("[SYNC] ‚ùå L·ªói kh·ªüi t·∫°o service: $e");
      }
    }
  }

  // Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng
  Future<bool> isConnected() async {
    final connectivityResult = await _connectivity.checkConnectivity();
    return connectivityResult != ConnectivityResult.none;
  }

  // Th√™m d·ªØ li·ªáu v√†o h√†ng ƒë·ª£i ƒë·ªìng b·ªô
  Future<void> addToSyncQueue(
      int dayNumber, List<Map<String, dynamic>> results) async {
    try {
      final box = await _getBox;
      // T·∫°o m·ªôt unique key d·ª±a tr√™n ng√†y v√† timestamp
      String key = 'day_${dayNumber}_${DateTime.now().millisecondsSinceEpoch}';

      // L∆∞u d·ªØ li·ªáu c·∫ßn ƒë·ªìng b·ªô
      await box.put(key, {
        'dayNumber': dayNumber,
        'results': results,
        'timestamp': DateTime.now().toIso8601String(),
        'syncAttempts': 0
      });

      if (kDebugMode) {
        print("[SYNC] ‚úÖ ƒê√£ th√™m d·ªØ li·ªáu ng√†y $dayNumber v√†o h√†ng ƒë·ª£i ƒë·ªìng b·ªô");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[SYNC] ‚ùå L·ªói khi th√™m v√†o h√†ng ƒë·ª£i: $e");
      }
    }
  }

  // ƒê·ªìng b·ªô d·ªØ li·ªáu t·ª´ h√†ng ƒë·ª£i
  Future<bool> syncPendingData() async {
    final db = await dbHelper.database;
    // Ki·ªÉm tra k·∫øt n·ªëi
    final hasConnection = await isConnected();
    if (!hasConnection) {
      if (kDebugMode) {
        print("[SYNC] ‚ö†Ô∏è Kh√¥ng c√≥ k·∫øt n·ªëi m·∫°ng, b·ªè qua ƒë·ªìng b·ªô");
      }
      return false;
    }

    try {
      final box = await _getBox;
      if (box.isEmpty) {
        if (kDebugMode) {
          print("[SYNC] ‚ÑπÔ∏è Kh√¥ng c√≥ d·ªØ li·ªáu c·∫ßn ƒë·ªìng b·ªô");
        }
        _syncStatusController.add(false);
        return true;
      }

      // L·∫•y danh s√°ch kh√≥a c·∫ßn ƒë·ªìng b·ªô
      final keys = box.keys.toList();
      bool allSuccess = true;

      // L·∫∑p qua t·ª´ng item v√† th·ª≠ ƒë·ªìng b·ªô
      for (var key in keys) {
        final item = box.get(key);
        if (item == null) continue;

        try {
          // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang ƒë√∫ng ƒë·ªãnh d·∫°ng
          final Map<String, dynamic> data = Map<String, dynamic>.from(item);
          final int dayNumber = data['dayNumber'] as int;
          final List<dynamic> resultsList = data['results'] as List<dynamic>;
          final List<Map<String, dynamic>> results = resultsList
              .map((item) => Map<String, dynamic>.from(item))
              .toList();

          print("[SYNC] üîÑ ƒêang ƒë·ªìng b·ªô d·ªØ li·ªáu cho ng√†y $dayNumber");
          print("[SYNC] üìä S·ªë l∆∞·ª£ng k·∫øt qu·∫£: ${results.length}");

          bool success = await sendToApiOffline(dayNumber, results);
          if (success) {
            // N·∫øu ƒë·ªìng b·ªô th√†nh c√¥ng, x√≥a kh·ªèi h√†ng ƒë·ª£i
            await box.delete(key);
            // N·∫øu th√†nh c√¥ng, x√≥a d·ªØ li·ªáu local
            await db.delete('workout_results',
                where: 'day_number = ?', whereArgs: [dayNumber]);
            if (kDebugMode) {
              print("[SYNC] ‚úÖ ƒê·ªìng b·ªô th√†nh c√¥ng d·ªØ li·ªáu: $key");
            }
          } else {
            // TƒÉng s·ªë l·∫ßn th·ª≠ ƒë·ªìng b·ªô
            data['syncAttempts'] = (data['syncAttempts'] ?? 0) + 1;
            await box.put(key, data);
            allSuccess = false;
            if (kDebugMode) {
              print(
                  "[SYNC] ‚ö†Ô∏è ƒê·ªìng b·ªô th·∫•t b·∫°i d·ªØ li·ªáu: $key, l·∫ßn th·ª≠: ${data['syncAttempts']}");
            }
          }
        } catch (e) {
          // X·ª≠ l√Ω l·ªói khi ƒë·ªìng b·ªô
          allSuccess = false;
          if (kDebugMode) {
            print("[SYNC] ‚ùå L·ªói khi ƒë·ªìng b·ªô d·ªØ li·ªáu $key: $e");
          }
        }
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë·ªìng b·ªô
      _syncStatusController.add(!allSuccess);
      return allSuccess;
    } catch (e) {
      if (kDebugMode) {
        print("[SYNC] ‚ùå L·ªói khi ƒë·ªìng b·ªô d·ªØ li·ªáu: $e");
      }
      _syncStatusController.add(true);
      return false;
    }
  }

  // G·ª≠i d·ªØ li·ªáu l√™n API
  Future<bool> sendToApiOffline(
      int dayNumber, List<Map<String, dynamic>> results) async {
    try {
      final box = await Hive.openBox('userBox');
      final token = box.get('token');

      if (token == null) {
        debugPrint("[SYNC] ‚ùå Token kh√¥ng t·ªìn t·∫°i");
        return false;
      }

      // ƒê·ªãnh d·∫°ng l·∫°i d·ªØ li·ªáu theo y√™u c·∫ßu c·ªßa API
      final Map<String, dynamic> apiData = {
        "dayNumber": dayNumber,
        "results": results
            .map((result) => {
                  "exerciseName": result['exerciseName']?.toString(),
                  "setsCompleted": result['setsCompleted'] is int
                      ? result['setsCompleted']
                      : int.tryParse(
                              result['setsCompleted']?.toString() ?? '0') ??
                          0,
                  "repsCompleted": result['repsCompleted'] is int
                      ? result['repsCompleted']
                      : int.tryParse(
                              result['repsCompleted']?.toString() ?? '0') ??
                          0,
                  "distanceCompleted": result['distanceCompleted'] is double
                      ? result['distanceCompleted']
                      : double.tryParse(
                              result['distanceCompleted']?.toString() ??
                                  '0.0') ??
                          0.0,
                  "durationCompleted": result['durationCompleted'] is int
                      ? result['durationCompleted']
                      : int.tryParse(
                              result['durationCompleted']?.toString() ?? '0') ??
                          0
                })
            .toList()
      };

      debugPrint("[SYNC] üì§ G·ª≠i d·ªØ li·ªáu l√™n API: $apiData");

      final response = await _dio.post(
        'http://54.251.220.228:8080/trainingSouls/workout/workout-results',
        data: apiData,
        options: Options(
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer $token',
          },
          validateStatus: (status) {
            return status! < 500;
          },
        ),
      );

      if (response.statusCode == 200 || response.statusCode == 201) {
        debugPrint("[SYNC] ‚úÖ G·ª≠i API th√†nh c√¥ng");

        return true;
      } else {
        debugPrint(
            "[SYNC] ‚ùå L·ªói API: ${response.statusCode} - ${response.data}");
        return false;
      }
    } catch (e) {
      debugPrint("[SYNC] ‚ùå L·ªói k·∫øt n·ªëi API: $e");
      return false;
    }
  }

  // Ki·ªÉm tra xem c√≥ d·ªØ li·ªáu ƒëang ch·ªù ƒë·ªìng b·ªô kh√¥ng
  Future<bool> hasPendingSync() async {
    try {
      final box = await _getBox;
      return box.isNotEmpty;
    } catch (e) {
      if (kDebugMode) {
        print("[SYNC] ‚ùå L·ªói ki·ªÉm tra d·ªØ li·ªáu ƒëang ch·ªù: $e");
      }
      return false;
    }
  }

  // L·∫•y s·ªë l∆∞·ª£ng d·ªØ li·ªáu ƒëang ch·ªù ƒë·ªìng b·ªô
  Future<int> getPendingSyncCount() async {
    try {
      final box = await _getBox;
      return box.length;
    } catch (e) {
      if (kDebugMode) {
        print("[SYNC] ‚ùå L·ªói l·∫•y s·ªë l∆∞·ª£ng d·ªØ li·ªáu ƒëang ch·ªù: $e");
      }
      return 0;
    }
  }

  // X√≥a to√†n b·ªô d·ªØ li·ªáu v√† ƒë√≥ng box
  Future<void> clearAllData() async {
    try {
      final box = await _getBox;
      await box.clear();
      await box.close();
      _box = null;
      if (kDebugMode) {
        print("[SYNC] ‚úÖ ƒê√£ x√≥a to√†n b·ªô d·ªØ li·ªáu ƒë·ªìng b·ªô");
      }
    } catch (e) {
      if (kDebugMode) {
        print("[SYNC] ‚ùå L·ªói khi x√≥a d·ªØ li·ªáu ƒë·ªìng b·ªô: $e");
      }
      rethrow;
    }
  }

  @override
  void dispose() {
    _syncStatusController.close();
    _box?.close();
  }
}
