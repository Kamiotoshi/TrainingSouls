import 'package:dio/dio.dart';
import 'package:hive/hive.dart';
import 'package:training_souls/api/user_service.dart';
import 'package:training_souls/models/user.dart';
import 'package:training_souls/models/user_response.dart';
import 'package:training_souls/models/work_out.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

class DatabaseHelper {
  static final DatabaseHelper _instance = DatabaseHelper._internal();
  factory DatabaseHelper() => _instance;
  static Database? _database;

  DatabaseHelper._internal();

  Future<Database> get database async {
    if (_database != null) return _database!;
    _database = await _initDatabase();
    return _database!;
  }

  Future<Database> _initDatabase() async {
    String path = join(await getDatabasesPath(), 'workout_database.db');
    return await openDatabase(
      path,
      version: 6, // TƒÉng version l√™n 6
      onCreate: _onCreate,
      onUpgrade: _onUpgrade,
    );
  }

  Future<void> _onUpgrade(Database db, int oldVersion, int newVersion) async {
    if (oldVersion < 3) {
      await db.execute(
          'ALTER TABLE workouts ADD COLUMN status TEXT DEFAULT "NOT_STARTED"');
    }
    if (oldVersion < 4) {
      // C·∫≠p nh·∫≠t v·ªõi c√°c b·∫£ng m·ªõi
      await db.execute('''
        CREATE TABLE roles (
          roleID INTEGER PRIMARY KEY AUTOINCREMENT,
          userID INTEGER,
          name TEXT,
          description TEXT,
          FOREIGN KEY(userID) REFERENCES user_info(userID)
        )
      ''');

      await db.execute('''
        CREATE TABLE permissions (
          permissionID INTEGER PRIMARY KEY AUTOINCREMENT,
          roleID INTEGER,
          name TEXT,
          description TEXT,
          FOREIGN KEY(roleID) REFERENCES roles(roleID)
        )
      ''');

      await db.execute('''
        CREATE TABLE user_profile (
          userID INTEGER PRIMARY KEY,
          gender TEXT,
          age INTEGER,
          height REAL,
          weight REAL,
          bmi REAL,
          bodyFatPercentage REAL,
          muscleMassPercentage REAL,
          activityLevel TEXT,
          fitnessGoal TEXT,
          level TEXT,
          strength INTEGER,
          deathPoints INTEGER,
          agility INTEGER,
          endurance INTEGER,
          health INTEGER,
          FOREIGN KEY(userID) REFERENCES user_info(userID)
        )
      ''');
    }
    if (oldVersion < 6) {
      // Th√™m b·∫£ng workout_results trong version 6
      await db.execute('''
        CREATE TABLE workout_results(
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          day_number INTEGER,
          exercise_name TEXT,
          sets_completed INTEGER,
          reps_completed INTEGER,
          distance_completed REAL,
          duration_completed INTEGER,
          completed_date TEXT
        )
      ''');
    }
  }

  Future<void> _onCreate(Database db, int version) async {
    // T·∫°o b·∫£ng user_info
    await db.execute('''
      CREATE TABLE user_info (
        userID INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        email TEXT,
        accountType TEXT,
        points INTEGER,
        level INTEGER
      )
    ''');

    // T·∫°o b·∫£ng workouts (b√†i t·∫≠p)
    await db.execute('''
      CREATE TABLE workouts (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        day INTEGER,
        img TEXT,
        icon TEXT,
        exerciseName TEXT,
        sets INTEGER,
        reps INTEGER,
        duration INTEGER,
        restDay INTEGER,
        distance REAL,
        status TEXT DEFAULT 'NOT_STARTED'
      )
    ''');
    await db.execute('''
      CREATE TABLE workout_results(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        day_number INTEGER,
        exercise_name TEXT,
        sets_completed INTEGER,
        reps_completed INTEGER,
        distance_completed REAL,
        duration_completed INTEGER,
        completed_date TEXT
      )
    ''');
  }

  Future<void> checkAndCreateTables() async {
    final db = await database;
    var tables = await db.rawQuery(
        "SELECT name FROM sqlite_master WHERE type='table' AND name='workout_results'");
    if (tables.isEmpty) {
      await db.execute('''
      CREATE TABLE workout_results(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        day_number INTEGER,
        exercise_name TEXT,
        sets_completed INTEGER,
        reps_completed INTEGER,
        distance_completed REAL,
        duration_completed INTEGER,
        completed_date TEXT
      )
      ''');
      print("[DEBUG] ‚úÖ ƒê√£ t·∫°o b·∫£ng workout_results");
    }
    // Ki·ªÉm tra b·∫£ng user_profile
    tables = await db.rawQuery(
        "SELECT name FROM sqlite_master WHERE type='table' AND name='user_profile'");
    if (tables.isEmpty) {
      await db.execute('''
      CREATE TABLE user_profile (
        userID INTEGER PRIMARY KEY,
        gender TEXT,
        age INTEGER,
        height REAL,
        weight REAL,
        bmi REAL,
        bodyFatPercentage REAL,
        muscleMassPercentage REAL,
        activityLevel TEXT,
        fitnessGoal TEXT,
        level TEXT,
        strength INTEGER,
        deathPoints INTEGER,
        agility INTEGER,
        endurance INTEGER,
        health INTEGER,
        FOREIGN KEY(userID) REFERENCES user_info(userID)
      )
    ''');
    }

    // Ki·ªÉm tra b·∫£ng roles
    tables = await db.rawQuery(
        "SELECT name FROM sqlite_master WHERE type='table' AND name='roles'");
    if (tables.isEmpty) {
      await db.execute('''
      CREATE TABLE roles (
        roleID INTEGER PRIMARY KEY AUTOINCREMENT,
        userID INTEGER,
        name TEXT,
        description TEXT,
        FOREIGN KEY(userID) REFERENCES user_info(userID)
      )
    ''');
    }

    // Ki·ªÉm tra b·∫£ng permissions
    tables = await db.rawQuery(
        "SELECT name FROM sqlite_master WHERE type='table' AND name='permissions'");
    if (tables.isEmpty) {
      await db.execute('''
      CREATE TABLE permissions (
        permissionID INTEGER PRIMARY KEY AUTOINCREMENT,
        roleID INTEGER,
        name TEXT,
        description TEXT,
        FOREIGN KEY(roleID) REFERENCES roles(roleID)
      )
    ''');
    }
  }

  Future<void> saveExerciseResult(
      int dayNumber, Map<String, dynamic> exerciseResult) async {
    final db = await database;

    try {
      // Ki·ªÉm tra xem b·∫£ng workout_results c√≥ t·ªìn t·∫°i kh√¥ng
      var tables = await db.rawQuery(
          "SELECT name FROM sqlite_master WHERE type='table' AND name='workout_results'");
      if (tables.isEmpty) {
        // T·∫°o b·∫£ng n·∫øu ch∆∞a c√≥
        await db.execute('''
        CREATE TABLE workout_results(
          id INTEGER PRIMARY KEY AUTOINCREMENT,
          day_number INTEGER,
          exercise_name TEXT,
          sets_completed INTEGER,
          reps_completed INTEGER,
          distance_completed REAL,
          duration_completed INTEGER,
          completed_date TEXT
        )
        ''');
        print("[DEBUG] ‚úÖ ƒê√£ t·∫°o b·∫£ng workout_results");
      }

      // Ki·ªÉm tra xem ƒë√£ c√≥ k·∫øt qu·∫£ cho ng√†y v√† b√†i t·∫≠p n√†y ch∆∞a
      final List<Map<String, dynamic>> existingResults = await db.query(
          'workout_results',
          where: 'day_number = ? AND exercise_name = ?',
          whereArgs: [dayNumber, exerciseResult['exerciseName']]);

      if (existingResults.isNotEmpty) {
        // C·∫≠p nh·∫≠t k·∫øt qu·∫£ hi·ªán c√≥
        await db.update(
            'workout_results',
            {
              'sets_completed': exerciseResult['setsCompleted'],
              'reps_completed': exerciseResult['repsCompleted'],
              'distance_completed': exerciseResult['distanceCompleted'],
              'duration_completed': exerciseResult['durationCompleted'],
              'completed_date': DateTime.now().toIso8601String()
            },
            where: 'day_number = ? AND exercise_name = ?',
            whereArgs: [dayNumber, exerciseResult['exerciseName']]);
        print("[DEBUG] ‚úèÔ∏è ƒê√£ c·∫≠p nh·∫≠t k·∫øt qu·∫£ c√≥ s·∫µn");
      } else {
        // Th√™m m·ªõi k·∫øt qu·∫£
        await db.insert('workout_results', {
          'day_number': dayNumber,
          'exercise_name': exerciseResult['exerciseName'],
          'sets_completed': exerciseResult['setsCompleted'],
          'reps_completed': exerciseResult['repsCompleted'],
          'distance_completed': exerciseResult['distanceCompleted'],
          'duration_completed': exerciseResult['durationCompleted'],
          'completed_date': DateTime.now().toIso8601String()
        });
        print("[DEBUG] ‚ûï ƒê√£ th√™m k·∫øt qu·∫£ m·ªõi");
      }
    } catch (e) {
      print("[DEBUG] ‚ùå L·ªói database: $e");
      throw e;
    }
  }

  Future<List<Map<String, dynamic>>> getWorkoutsForDate(
      String dateString) async {
    final db = await database;

    // T√¨m t·∫•t c·∫£ k·∫øt qu·∫£ t·∫≠p luy·ªán c√≥ ng√†y ho√†n th√†nh l√† ng√†y ƒë∆∞·ª£c ch·ªçn
    // Ch√∫ng ta t√¨m ki·∫øm b·∫±ng c√°ch so s√°nh ph·∫ßn ƒë·∫ßu c·ªßa chu·ªói ng√†y (YYYY-MM-DD)
    final List<Map<String, dynamic>> results = await db.rawQuery('''
    SELECT * FROM workout_results 
    WHERE completed_date LIKE '$dateString%'
    ORDER BY completed_date DESC
  ''');

    return results;
  }

  // L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ t·ª´ b·∫£ng workout_results
  Future<List<Map<String, dynamic>>> getAllWorkoutResults() async {
    final db = await database;
    final List<Map<String, dynamic>> results =
        await db.query('workout_results');
    print("[DEBUG] üìä ƒê√£ l·∫•y ${results.length} k·∫øt qu·∫£ t·ª´ workout_results");
    return results;
  }

  // Ph∆∞∆°ng th·ª©c l·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ cho m·ªôt ng√†y c·ª• th·ªÉ
  Future<Map<String, dynamic>> getDayResults(int dayNumber) async {
    final db = await database;

    final resultsList = await db.query('workout_results',
        where: 'day_number = ?', whereArgs: [dayNumber]);

    final formattedResults = {"dayNumber": dayNumber, "results": resultsList};

    return formattedResults;
  }

  // C√°c ph∆∞∆°ng th·ª©c kh√°c gi·ªØ nguy√™n

  // Th√™m b√†i t·∫≠p v√†o database
  Future<void> insertWorkout(Workout workout) async {
    final db = await database;
    await db.insert('workouts', workout.toMap(),
        conflictAlgorithm: ConflictAlgorithm.replace);
  }

  // L·∫•y t·∫•t c·∫£ b√†i t·∫≠p t·ª´ database
  Future<List<Workout>> getWorkouts() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query('workouts');
    return List.generate(maps.length, (i) {
      return Workout.fromMap(maps[i]);
    });
  }

  // X√≥a t·∫•t c·∫£ b√†i t·∫≠p trong database
  Future<void> clearWorkouts() async {
    final db = await database;
    await db.delete('workouts');
  }

  // C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†i t·∫≠p
  Future<void> updateWorkoutStatus(int id, String newStatus) async {
    final db = await database;
    await db.update(
      'workouts',
      {'status': newStatus},
      where: 'id = ?',
      whereArgs: [id],
    );
  }

  // Th√™m user info
  Future<void> insertUserInfo(Map<String, dynamic> userInfo) async {
    final db = await database;
    await db.insert('user_info', userInfo,
        conflictAlgorithm: ConflictAlgorithm.replace);
  }

  Future<String?> getUserName() async {
    final db = await database;
    final List<Map<String, dynamic>> maps = await db.query('user_info');

    if (maps.isNotEmpty) {
      return maps.first['name'];
    }
    return null;
  }

  // Th√™m roles
// Th√™m roles v√† tr·∫£ v·ªÅ roleID
  Future<int> insertRole(Map<String, dynamic> role) async {
    final db = await database;
    return await db.insert('roles', role,
        conflictAlgorithm: ConflictAlgorithm.replace);
  }

  // Th√™m permissions
  Future<void> insertPermission(Map<String, dynamic> permission) async {
    final db = await database;
    await db.insert('permissions', permission,
        conflictAlgorithm: ConflictAlgorithm.replace);
  }

  // Th√™m user profile
  Future<void> insertUserProfile(Map<String, dynamic> userProfile) async {
    final db = await database;
    await db.insert('user_profile', userProfile,
        conflictAlgorithm: ConflictAlgorithm.replace);
  }

  // L·∫•y th√¥ng tin user (user_info + profile + roles)
  Future<Map<String, dynamic>> getUser(int userID) async {
    final db = await database;

    // L·∫•y user_info
    final userInfoResult =
        await db.query('user_info', where: 'userID = ?', whereArgs: [userID]);
    if (userInfoResult.isEmpty) return {};
    var userInfo = userInfoResult.first;

    // L·∫•y roles
    final rolesResult =
        await db.query('roles', where: 'userID = ?', whereArgs: [userID]);
    var roles = rolesResult.map((role) => role).toList();

    // L·∫•y user_profile
    final profileResult = await db
        .query('user_profile', where: 'userID = ?', whereArgs: [userID]);
    var userProfile = profileResult.isNotEmpty ? profileResult.first : {};

    return {
      'user_info': userInfo,
      'roles': roles,
      'user_profile': userProfile,
    };
  }

  // Ph∆∞∆°ng th·ª©c l·∫•y k·∫øt qu·∫£ cho m·ªôt ng√†y c·ª• th·ªÉ v√† t√™n b√†i t·∫≠p
  Future<List<Map<String, dynamic>>> getExerciseResults(int day) async {
    final db = await database;
    final List<Map<String, dynamic>> results = await db.query(
      'workout_results',
      where: 'day_number = ?',
      whereArgs: [day],
    );
    return results;
  }

  Future<void> insertExerciseResult(int day, String exerciseName) async {
    final db = await database;

    await db.insert(
      'exercise_results', // üëâ T√™n b·∫£ng l∆∞u k·∫øt qu·∫£, s·ª≠a ƒë√∫ng t√™n b·∫£ng c·ªßa em nh√©
      {
        'day': day,
        'exercise_name': exerciseName,
      },
      conflictAlgorithm: ConflictAlgorithm.replace, // N·∫øu tr√πng th√¨ thay
    );
  }

  Future<void> updateUserInfoInDatabase(User user) async {
    final db = await database;

    try {
      await db.transaction((txn) async {
        // 1. X√≥a d·ªØ li·ªáu user c≈©
        await txn.delete('user_info');

        // 2. Th√™m th√¥ng tin user m·ªõi
        final userInfoMap = {
          'userID': user.userID, // Gi·ªØ userID t·ª´ API
          'name': user.name,
          'email': user.email,
          'accountType': user.accountType,
          'points': user.points,
          'level': user.level,
        };

        await txn.insert('user_info', userInfoMap);

        // 3. C·∫≠p nh·∫≠t user_profile
        final userProfileExists = await txn.query('user_profile',
            where: 'userID = ?', whereArgs: [user.userID]);

        final userProfileMap = {
          'userID': user.userID,
          'gender': user.userProfile.gender,
          'age': user.userProfile.age,
          'height': user.userProfile.height,
          'weight': user.userProfile.weight,
          'bmi': user.userProfile.bmi,
          'bodyFatPercentage': user.userProfile.bodyFatPercentage,
          'muscleMassPercentage': user.userProfile.muscleMassPercentage,
          'activityLevel': user.userProfile.activityLevel,
          'fitnessGoal': user.userProfile.fitnessGoal,
          'level': user.userProfile.level,
          'strength': user.userProfile.strength,
          'deathPoints': user.userProfile.deathPoints,
          'agility': user.userProfile.agility,
          'endurance': user.userProfile.endurance,
          'health': user.userProfile.health,
        };

        if (userProfileExists.isEmpty) {
          await txn.insert('user_profile', userProfileMap);
        } else {
          await txn.update('user_profile', userProfileMap,
              where: 'userID = ?', whereArgs: [user.userID]);
        }

        // 4. C·∫≠p nh·∫≠t roles (n·∫øu c·∫ßn)
        // X√≥a roles c≈©
        await txn
            .delete('roles', where: 'userID = ?', whereArgs: [user.userID]);

        // Th√™m roles m·ªõi
        for (var role in user.roles) {
          await txn.insert('roles', {
            'userID': user.userID,
            'name': role.name,
            'description': role.description,
          });
        }
      });

      print(
          "[DEBUG] ‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin user, profile v√† roles trong database");
    } catch (e) {
      print("[DEBUG] ‚ùå L·ªói c·∫≠p nh·∫≠t database: $e");
      throw e;
    }
  }

  Future<void> updateUserInfoFromAPI() async {
    try {
      // L·∫•y token t·ª´ Hive
      var box = await Hive.openBox('userBox');
      final token = box.get('token');

      if (token == null) {
        throw Exception("Token kh√¥ng t·ªìn t·∫°i, vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i");
      }

      // T·∫°o ƒë·ªëi t∆∞·ª£ng API Service
      final dio = Dio();
      final userService = UserService(dio);

      // G·ªçi API ƒë·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng m·ªõi
      final UserResponse userResponse =
          await userService.getMyInfo("Bearer $token");

      // Truy c·∫≠p thu·ªôc t√≠nh result (ƒë·ªëi t∆∞·ª£ng User)
      final User user = userResponse.result;

      // C·∫≠p nh·∫≠t th√¥ng tin v√†o database
      await updateUserInfoInDatabase(user);

      print("[DEBUG] ‚úÖ ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng t·ª´ API th√†nh c√¥ng");
    } catch (e) {
      print("[DEBUG] ‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin t·ª´ API: $e");
      throw e;
    }
  }
}
