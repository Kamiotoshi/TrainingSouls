import 'package:training_souls/api/workout_service.dart';
import 'package:training_souls/api/api_service.dart';
import 'package:training_souls/api/dio_client.dart';
import 'package:training_souls/data/DatabaseHelper.dart';
import 'package:training_souls/data/local_storage.dart';
import 'package:training_souls/models/user_data.dart';
import 'package:training_souls/models/work_out.dart';
import 'package:training_souls/screens/trainhome.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';

class ThemLoadingScreen extends StatefulWidget {
  const ThemLoadingScreen({super.key});

  @override
  State<ThemLoadingScreen> createState() => _ThemLoadingScreenState();
}

class _ThemLoadingScreenState extends State<ThemLoadingScreen> {
  bool isLoading = true; // ‚úÖ Tr·∫°ng th√°i loading

  @override
  void initState() {
    super.initState();
    _fetchAndSaveWorkouts();
  }

  Future<void> _fetchAndSaveWorkouts() async {
    setState(() => isLoading = true);

    final userDataMap = await LocalStorage.loadUserData();
    final userData = UserData.fromJson(userDataMap);

    if (kDebugMode) {
      print('üì° D·ªØ li·ªáu ƒë·ªçc ƒë∆∞·ª£c: ${userData.toJson()}');
    }

    final apiService = ApiService(DioClient.dio);
    final workoutService = WorkoutService(apiService);
    final dbHelper = DatabaseHelper();

    try {
      await apiService.sendUserData(userData);
      if (kDebugMode) {
        print("‚úÖ ƒê√£ g·ª≠i th√¥ng tin ng∆∞·ªùi d√πng th√†nh c√¥ng!");
      }

      // ‚úÖ L·∫•y danh s√°ch b√†i t·∫≠p t·ª´ API
      final List<Workout> workouts =
          await workoutService.fetchWorkouts(userData);

      // ‚úÖ L∆∞u d·ªØ li·ªáu v√†o SQLite
      await dbHelper.clearWorkouts(); // X√≥a d·ªØ li·ªáu c≈© (n·∫øu c√≥)
      for (var workout in workouts) {
        await dbHelper.insertWorkout(workout); // L∆∞u t·ª´ng b√†i t·∫≠p v√†o SQLite
      }
      if (kDebugMode) {
        print('‚úÖ ƒê√£ l∆∞u ${workouts.length} b√†i t·∫≠p v√†o SQLite!');
      }

      if (mounted) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(builder: (context) => Trainhome()),
        );
      }
    } catch (e) {
      if (kDebugMode) {
        print('‚ùå L·ªói khi g·ªçi API: $e');
      }
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('L·ªói khi t·∫°o b√†i t·∫≠p: $e')),
        );
      }
    } finally {
      if (mounted) setState(() => isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: isLoading
            ? Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Lottie.asset("assets/img/Animation_1740914934240.json"),
                  const Text('ƒêang chu·∫©n b·ªã b√†i t·∫≠p...'),
                ],
              )
            : const Text('ƒê√£ t·∫£i xong!'),
      ),
    );
  }
}
