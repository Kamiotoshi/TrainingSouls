import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:training_souls/data/DatabaseHelper.dart';
import 'package:training_souls/screens/popup/premium_required_popup.dart';
import 'package:training_souls/Stripe/account_type_dialog.dart';
import 'package:training_souls/models/work_out.dart';

import '../APi/user_service.dart';
import 'package:training_souls/data/local_storage.dart';

class PremiumTrialManager {
  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t√†i kho·∫£n premium hay kh√¥ng
  static Future<bool> isPremiumUser() async {
    try {
      final token = await LocalStorage.getValidToken();
      if (token == null) {
        throw Exception("Token kh√¥ng t·ªìn t·∫°i");
      }

      final dio = Dio();
      final client = UserService(dio);
      final response = await client.getMyInfo("Bearer $token");

      if (response.code == 0 && response.result != null) {
        final accountType = response.result?.accountType?.toLowerCase() ?? 'basic';
        return accountType == 'premium';
      }

      return false;
    } catch (e) {
      print("‚ùå L·ªói khi ki·ªÉm tra lo·∫°i t√†i kho·∫£n: $e");
      return false;
    }
  }

  // Ki·ªÉm tra xem th·ªùi gian d√πng th·ª≠ ƒë√£ h·∫øt ch∆∞a
  static Future<bool> isTrialExpired() async {
    try {
      // Ki·ªÉm tra xem ng∆∞·ªùi d√πng c√≥ t√†i kho·∫£n premium kh√¥ng
      final hasPremium = await isPremiumUser();

      // N·∫øu ng∆∞·ªùi d√πng c√≥ t√†i kho·∫£n premium, kh√¥ng c·∫ßn ki·ªÉm tra th·ªùi gian d√πng th·ª≠
      if (hasPremium) {
        return false;
      }
      final dbHelper = DatabaseHelper();
      final List<Workout> allWorkouts = await dbHelper.getWorkouts();

      if (allWorkouts.isEmpty) {
        return false;
      }

      // X√°c ƒë·ªãnh ng√†y b·∫Øt ƒë·∫ßu ch∆∞∆°ng tr√¨nh d·ª±a v√†o workoutDate
      final programStartDate = allWorkouts
          .map((e) => e.workoutDate)
          .whereType<String>()
          .map((s) => DateTime.tryParse(s))
          .whereType<DateTime>()
          .reduce((a, b) => a.isBefore(b) ? a : b);

      if (programStartDate == null) {
        return false;
      }

      // T√≠nh s·ªë ng√†y ƒë√£ tr√¥i qua k·ªÉ t·ª´ khi b·∫Øt ƒë·∫ßu
      final now = DateTime.now();
      final daysPassed = now.difference(programStartDate).inDays;

      // Ki·ªÉm tra n·∫øu ƒë√£ qua 7 ng√†y
      return daysPassed >= 7;
    } catch (e) {
      print("‚ùå L·ªói khi ki·ªÉm tra th·ªùi gian d√πng th·ª≠: $e");
      return false;
    }
  }

  // Ki·ªÉm tra v√† hi·ªÉn th·ªã popup n·∫øu h·∫øt th·ªùi gian d√πng th·ª≠
  static Future<void> checkAndShowTrialExpiredPopup(
      BuildContext context) async {
    final isExpired = await isTrialExpired();
    if (isExpired) {
      // Hi·ªÉn th·ªã popup kh√¥ng th·ªÉ ƒë√≥ng
      showDialog(
        context: context,
        barrierDismissible: false,
        builder: (context) => PremiumRequiredPopup(
          onBuyPremium: () {
            Navigator.pop(context); // ƒê√≥ng popup hi·ªán t·∫°i
            showDialog(
              context: context,
              builder: (context) => AccountTypePopup(
                selectedOption: 'Basic',
                options: ['Basic', 'Premium'],
                onSelected: (selectedType) {
                  print("üî∂ Ng∆∞·ªùi d√πng ƒë√£ ch·ªçn g√≥i: $selectedType");
                },
              ),
            );
          },
        ),
      );
    }
  }


}
