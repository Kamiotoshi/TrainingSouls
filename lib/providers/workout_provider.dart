import 'package:flutter/material.dart';
import 'package:training_souls/api/api_service.dart';
import 'package:training_souls/data/DatabaseHelper.dart';
import 'package:training_souls/models/work_out.dart';

class WorkoutProvider extends ChangeNotifier {
  List<Workout> _workouts = [];
  bool _isLoading = false;

  List<Workout> get workouts => _workouts;
  bool get isLoading => _isLoading;

  final ApiService _apiService;
  final DatabaseHelper _dbHelper = DatabaseHelper();

  WorkoutProvider(this._apiService) {
    // T·∫£i d·ªØ li·ªáu t·ª´ SQLite khi kh·ªüi t·∫°o
    ensureWorkoutsLoaded();
  }

  // ƒê·∫£m b·∫£o d·ªØ li·ªáu ƒë∆∞·ª£c t·∫£i n·∫øu danh s√°ch r·ªóng
  Future<void> ensureWorkoutsLoaded() async {
    if (_workouts.isEmpty && !_isLoading) {
      await loadWorkoutsFromSQLite();
    }
  }

  // L√†m m·ªõi d·ªØ li·ªáu sau khi database thay ƒë·ªïi
  Future<void> refreshAfterDatabaseChange() async {
    await loadWorkoutsFromSQLite();
  }

  Future<void> syncWorkouts(String token) async {
    _isLoading = true;
    notifyListeners();
    try {
      List<Workout> fetchedWorkouts =
          await _apiService.getWorkouts("Bearer $token");
      print("DEBUG: Fetched ${fetchedWorkouts.length} workouts from API");

      // Ch·ªâ x√≥a b·∫£ng workouts, gi·ªØ l·∫°i workout_results
      await _dbHelper.clearWorkoutsOnly();

      await _dbHelper.insertMultipleWorkouts(fetchedWorkouts);
      _workouts = fetchedWorkouts;
      print("‚úÖ ƒê√£ ƒë·ªìng b·ªô ${_workouts.length} b√†i t·∫≠p m·ªõi v√†o SQLite!");
      await refreshAfterDatabaseChange();
    } catch (e) {
      print("‚ùå L·ªói khi ƒë·ªìng b·ªô b√†i t·∫≠p: $e");
      await refreshAfterDatabaseChange();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> resetAllData(String token) async {
    _isLoading = true;
    notifyListeners();
    try {
      List<Workout> fetchedWorkouts =
          await _apiService.getWorkouts("Bearer $token");

      // X√≥a t·∫•t c·∫£ d·ªØ li·ªáu (c·∫£ workouts v√† workout_results)
      await _dbHelper.clearAllData();

      await _dbHelper.insertMultipleWorkouts(fetchedWorkouts);
      _workouts = fetchedWorkouts;
      print(
          "‚úÖ ƒê√£ reset v√† ƒë·ªìng b·ªô ${_workouts.length} b√†i t·∫≠p m·ªõi v√†o SQLite!");
      await refreshAfterDatabaseChange();
    } catch (e) {
      print("‚ùå L·ªói khi reset d·ªØ li·ªáu: $e");
      await refreshAfterDatabaseChange();
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> fetchAndSaveWorkouts(String token) async {
    _isLoading = true;
    notifyListeners();

    try {
      List<Workout> fetchedWorkouts =
          await _apiService.getWorkouts("Bearer $token");

      await _dbHelper.clearWorkouts();
      await _dbHelper.saveWorkoutsAndNotify(
          fetchedWorkouts, this); // S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c m·ªõi
      _workouts = fetchedWorkouts;

      print("‚úÖ ƒê√£ l∆∞u ${_workouts.length} b√†i t·∫≠p v√†o SQLite!");
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y b√†i t·∫≠p: $e");
      await refreshAfterDatabaseChange(); // L√†m m·ªõi n·∫øu c√≥ l·ªói
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> loadWorkoutsFromSQLite() async {
    _isLoading = true;
    notifyListeners();

    try {
      _workouts = await _dbHelper.getWorkouts();
      if (_workouts.isNotEmpty) {
        print("üìå ƒê√£ t·∫£i ${_workouts.length} b√†i t·∫≠p t·ª´ SQLite!");
      } else {
        print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong SQLite.");
      }
    } catch (e) {
      print("‚ùå L·ªói khi t·∫£i t·ª´ SQLite: $e");
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  void updateWorkouts(List<Workout> newWorkouts) {
    _workouts = newWorkouts;
    notifyListeners();
  }
}
