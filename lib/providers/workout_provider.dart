import 'package:training_souls/data/DatabaseHelper.dart';
import 'package:flutter/material.dart';
import 'package:training_souls/api/api_service.dart';

import 'package:training_souls/models/work_out.dart';

class WorkoutProvider extends ChangeNotifier {
  List<Workout> _workouts = [];
  bool _isLoading = false;

  List<Workout> get workouts => _workouts;
  bool get isLoading => _isLoading;

  final ApiService _apiService;
  final DatabaseHelper _dbHelper = DatabaseHelper();

  WorkoutProvider(this._apiService);

  Future<void> fetchAndSaveWorkouts(String token) async {
    _isLoading = true;
    notifyListeners();

    try {
      List<Workout> fetchedWorkouts =
          await _apiService.getWorkouts("Bearer $token");

      // ‚úÖ L∆∞u d·ªØ li·ªáu v√†o SQLite
      await _dbHelper.clearWorkouts();
      for (var workout in fetchedWorkouts) {
        await _dbHelper.insertWorkout(workout);
      }
      _workouts = fetchedWorkouts;

      print("‚úÖ ƒê√£ l∆∞u ${_workouts.length} b√†i t·∫≠p v√†o SQLite!");
    } catch (e) {
      print("‚ùå L·ªói khi l·∫•y b√†i t·∫≠p: $e");
    }
    _isLoading = false;
    notifyListeners();
  }

  Future<void> loadWorkoutsFromSQLite() async {
    _isLoading = true;
    notifyListeners();

    _workouts = await _dbHelper.getWorkouts();
    if (_workouts.isNotEmpty) {
      print("üìå ƒê√£ t·∫£i ${_workouts.length} b√†i t·∫≠p t·ª´ SQLite!");
    } else {
      print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu trong SQLite.");
    }

    _isLoading = false;
    notifyListeners();
  }
}
